import streamlit as st
import pandas as pd
import plotly.express as px
import re
from datetime import datetime

st.set_page_config(page_title="Checklist Veicular", layout="wide")

@st.cache_data
def load_excel(file):
    df = pd.read_excel(file)
    df.columns = df.columns.str.strip().str.replace('\s+', ' ', regex=True)
    df = df.loc[:, ~df.columns.str.contains('^Unnamed')]
    return df

def extract_drive_links(urls_string):
    if not urls_string or pd.isna(urls_string):
        return []
    urls = re.split(r'[,\s\n]+', str(urls_string).strip())
    links = []
    for url in urls:
        match = re.search(r'/d/([a-zA-Z0-9_-]+)', url)
        if not match:
            match = re.search(r'id=([a-zA-Z0-9_-]+)', url)
        if match:
            file_id = match.group(1)
            links.append(f"https://drive.google.com/uc?export=view&id={file_id}")
        else:
            links.append(url)
    return links

def severity_color(val):
    if val <= 0.1:
        return f'<span style="color:#2ecc71;font-weight:bold;">{val:.3f}</span>'
    elif val <= 0.3:
        return f'<span style="color:#f1c40f;font-weight:bold;">{val:.3f}</span>'
    else:
        return f'<span style="color:#e74c3c;font-weight:bold;">{val:.3f}</span>'

def main():
    st.title("üöõ Dashboard Checklist Veicular")

    # Upload
    checklist_file = st.file_uploader("üìÅ Checklist Excel", type="xlsx")
    manut_file = st.file_uploader("üìÅ MANU.PREVENT Excel", type="xlsx")
    if not checklist_file or not manut_file:
        st.info("üìå Envie os dois arquivos para continuar.")
        return

    with st.spinner("üîÑ Carregando..."):
        df = load_excel(checklist_file)
        manut = load_excel(manut_file)

    # Colunas principais
    col_fotos = "Anexe as fotos das n√£o conformidades:"
    col_obs = "Observa√ß√µes:"
    col_status = "Status NC"

    obrigatorias = ["Carimbo de data/hora", "Motorista", "Placa do Caminh√£o", "Pontua√ß√£o", col_fotos, col_obs, col_status]
    if any(col not in df.columns for col in obrigatorias):
        st.error(f"‚ùå Colunas obrigat√≥rias ausentes: {[c for c in obrigatorias if c not in df.columns]}")
        return

    # Limpeza inicial
    df["Carimbo de data/hora"] = pd.to_datetime(df["Carimbo de data/hora"], errors="coerce")
    if df["Carimbo de data/hora"].isna().all():
        st.error("‚ùå Nenhuma data v√°lida encontrada em 'Carimbo de data/hora'.")
        return

    df["Data"] = df["Carimbo de data/hora"].dt.strftime("%d/%m/%Y")
    df[col_status] = df[col_status].fillna("").str.lower().str.strip()

    # Filtros globais
    st.sidebar.markdown("### üìÖ Filtros")
    min_date, max_date = df["Carimbo de data/hora"].min(), df["Carimbo de data/hora"].max()
    start_date = st.sidebar.date_input("Data inicial", min_date.date())
    end_date = st.sidebar.date_input("Data final", max_date.date())

    if start_date > end_date:
        st.sidebar.error("Data inicial n√£o pode ser maior que a final.")
        return

    df = df[(df["Carimbo de data/hora"] >= pd.Timestamp(start_date)) & 
            (df["Carimbo de data/hora"] <= pd.Timestamp(end_date) + pd.Timedelta(days=1))]

    motoristas = sorted(df["Motorista"].dropna().unique())
    placas = sorted(df["Placa do Caminh√£o"].dropna().unique())

    sel_motorista = st.sidebar.multiselect("Motoristas", motoristas, default=motoristas)
    sel_placa = st.sidebar.multiselect("Placas", placas, default=placas)

    df = df[df["Motorista"].isin(sel_motorista)]
    df = df[df["Placa do Caminh√£o"].isin(sel_placa)]

    status_opcoes = ["Todos", "Aberto / Em andamento", "Conclu√≠do"]
    status_sel = st.sidebar.selectbox("Status da NC", status_opcoes)

    if status_sel == "Aberto / Em andamento":
        df = df[df[col_status].isin(["aberto", "em andamento"])]
    elif status_sel == "Conclu√≠do":
        df = df[df[col_status] == "conclu√≠do"]

    # Itens de checklist
    cols_excluir = obrigatorias + ["Data", "Km atual"]
    itens = [col for col in df.columns if col not in cols_excluir]

    df_itens = df[itens].fillna("").astype(str).applymap(lambda x: x.strip().lower())
    df["Reincidencias"] = df_itens.apply(lambda row: sum(v != "ok" and v != "" for v in row), axis=1)

    # Tabs
    aba1, aba2, aba3, aba4, aba5 = st.tabs([
        "üìä Vis√£o Geral", "üõ†Ô∏è Manuten√ß√£o", "üìå Itens Cr√≠ticos", "üìù Observa√ß√µes", "üì∏ Fotos"
    ])

    with aba1:
        st.markdown("### üî¢ Indicadores")
        resumo = df.groupby("Placa do Caminh√£o")["Reincidencias"].sum().reset_index()
        veic_top = resumo.loc[resumo["Reincidencias"].idxmax(), "Placa do Caminh√£o"] if not resumo.empty else "N/A"
        total_nc = resumo["Reincidencias"].max() if not resumo.empty else 0

        col1, col2 = st.columns(2)
        col1.metric("üöõ Ve√≠culo com Mais NCs", veic_top, f"{int(total_nc)} ocorr√™ncias")
        col2.metric("üìã Checklists no Per√≠odo", len(df))

        st.markdown("### üìâ NCs por Ve√≠culo")
        fig = px.bar(
            resumo.sort_values("Reincidencias"),
            x="Reincidencias",
            y="Placa do Caminh√£o",
            color="Reincidencias",
            orientation="h",
            color_continuous_scale=["green", "yellow", "red"],
            labels={"Reincidencias": "N√£o Conformidades", "Placa do Caminh√£o": "Placa"}
        )
        st.plotly_chart(fig, use_container_width=True)

    with aba2:
        manut.columns = manut.columns.str.strip()
        if "PLACA" not in manut.columns or "MANUT. PROGRAMADA" not in manut.columns:
            st.warning("‚ùå Colunas 'PLACA' ou 'MANUT. PROGRAMADA' ausentes.")
        else:
            cruzado = pd.merge(resumo, manut, how="left", left_on="Placa do Caminh√£o", right_on="PLACA")
            cruzado = cruzado.dropna(subset=["MANUT. PROGRAMADA"]).sort_values(by="Reincidencias", ascending=False)
            cruzado["√çndice de Severidade"] = (
                (cruzado["Reincidencias"] / len(itens)).round(3).apply(severity_color)
            )
            st.markdown("### üõ†Ô∏è Manuten√ß√£o Programada x NCs")
            st.write(cruzado[["PLACA", "MODELO", "MANUT. PROGRAMADA", "Reincidencias", "√çndice de Severidade"]].to_html(escape=False), unsafe_allow_html=True)

    with aba3:
        st.markdown("### üìå Itens com Mais N√£o Conformidades")
        df_nc_item = pd.DataFrame({
            "Item": itens,
            "N√£o Conformidades": [df_itens[col].ne("ok").sum() for col in itens]
        }).query("`N√£o Conformidades` > 0").sort_values("N√£o Conformidades", ascending=False)
        df_nc_item["%"] = ((df_nc_item["N√£o Conformidades"] / df_nc_item["N√£o Conformidades"].sum()) * 100).round(1)

        st.plotly_chart(px.bar(
            df_nc_item,
            x="N√£o Conformidades",
            y="Item",
            orientation="h",
            color="N√£o Conformidades",
            color_continuous_scale=["green", "yellow", "red"]
        ), use_container_width=True)

        st.dataframe(df_nc_item)

    with aba4:
        st.markdown("### üìù Observa√ß√µes dos Motoristas")
        obs = df[["Data", "Motorista", "Placa do Caminh√£o", col_obs, col_status]].dropna(subset=[col_obs])
        if not obs.empty:
            st.dataframe(obs)
        else:
            st.info("Nenhuma observa√ß√£o registrada.")

    with aba5:
        st.markdown("### üì∏ Fotos de N√£o Conformidades")
        fotos_df = df[["Data", "Motorista", "Placa do Caminh√£o", col_fotos, col_status] + itens].dropna(subset=[col_fotos])
        placas_disp = sorted(fotos_df["Placa do Caminh√£o"].unique())
        sel_foto = st.selectbox("Filtrar por Placa", ["Todas"] + placas_disp)

        if sel_foto != "Todas":
            fotos_df = fotos_df[fotos_df["Placa do Caminh√£o"] == sel_foto]

        if fotos_df.empty:
            st.info("Nenhuma foto encontrada.")
        else:
            for _, row in fotos_df.iterrows():
                nc_itens = [col for col in itens if row[col].strip().lower() != "ok"]
                links = extract_drive_links(row[col_fotos])

                st.markdown(f"""
**üìÖ {row['Data']}**  
üë®‚Äç‚úàÔ∏è **Motorista:** {row['Motorista']}  
üöö **Placa:** {row['Placa do Caminh√£o']}  
üìç **Status:** {row[col_status]}  
üîß **Itens N√£o Conformes:** {", ".join(nc_itens)}
""")
                for i, link in enumerate(links, 1):
                    st.markdown(f"[üîó Foto {i}]({link})")
                st.markdown("---")

if __name__ == "__main__":
    main()
